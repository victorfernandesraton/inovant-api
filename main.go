package main

import (
	_ "database/sql"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gofrs/uuid"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
	"github.com/tidwall/buntdb"

	_ "gitlab.com/falqon/inovantapp/backend/docs" // docs is generated by Swag CLI, you have to import it.
	"gitlab.com/falqon/inovantapp/backend/server/handler"
	"gitlab.com/falqon/inovantapp/backend/service/appconf"
	"gitlab.com/falqon/inovantapp/backend/service/schedule"
	"gitlab.com/falqon/inovantapp/backend/service/user"
	"gitlab.com/falqon/inovantapp/backend/service/user/auth/rolecache"
)

// @title inovantapp API
// @version 1.0
// @description API server for inovantapp.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @host 192.168.1.69:8080
// @BasePath /

func main() {
	psqlInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		appconf.DB.Host, appconf.DB.Port, appconf.DB.User, appconf.DB.Password, appconf.DB.Name)
	db, err := sqlx.Connect("postgres", psqlInfo)
	if err != nil {
		panic(fmt.Sprintf("Not connected to db \n %v \n error %v", psqlInfo, err.Error()))
	}

	fmt.Printf("connected to db \n %v ", psqlInfo)

	defer db.Close()

	// in-memory cache for roles
	memDB, err := buntdb.Open(":memory:")
	if err != nil {
		panic(err)
	}
	defer memDB.Close()

	rcServ := &rolecache.RoleCache{
		DB: memDB,
		GetUserRoles: func(userID string) ([]string, error) {
			roles := []string{}
			UID, err := uuid.FromString(userID)
			if err != nil {
				return roles, err
			}
			g := user.Getter{DB: db}

			u, err := g.Run(UID)
			if err != nil {
				return roles, err
			}
			return u.Roles, nil
		},
	}

	addr := appconf.App.Address
	if len(addr) == 0 {
		addr = ":8080"
	}

	schedulerNotifier := schedule.ScheduleNotifier{DB: db, Logger: log.New(os.Stdout, "ScheduleNotifier: ", log.LstdFlags)}
	go func() {
		<-schedulerNotifier.Start()
	}()

	server := handler.HTTPServer{
		DB:    db,
		Roles: rcServ,
		Auth: &user.Authenticator{
			DB: db,
			JWTConfig: user.JWTConfig{
				Secret:          appconf.JWT.Secret,
				HoursTillExpire: time.Hour * 24 * 7,
				SigningMethod:   jwt.SigningMethodHS256,
			},
		},
		JWTConfig: handler.JWTConfig{
			Secret:       appconf.JWT.Secret,
			ClaimsCtxKey: appconf.JWT.ClaimsCtxKey,
			RolesCtxKey:  appconf.JWT.RolesCtxKey,
		},
		ServerConf: handler.ServerConf{
			BodyLimit:  appconf.Server.UploadLimit,
			Address:    addr,
			AppAddress: appconf.App.URL,
		},
	}
	server.Run()
}
